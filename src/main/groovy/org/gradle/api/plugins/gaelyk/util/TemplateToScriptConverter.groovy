/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.gradle.api.plugins.gaelyk.util

import groovy.text.SimpleTemplateEngine

import org.codehaus.groovy.control.MultipleCompilationErrorsException;
import org.codehaus.groovy.control.messages.SyntaxErrorMessage;
import org.gradle.api.file.FileCollection

/**
 * Template to script converter.
 *
 * @author Vladimir Orany
 */
class TemplateToScriptConverter {
    private final HiJackGroovyShell hjgs
    private final SimpleTemplateEngine ste

    TemplateToScriptConverter(FileCollection classpath) {
        hjgs = [classpath]
        ste = [hjgs]
    }

    String getTemplateAsScript(String template, String pkg, File original, File templatesRoot) {
        try {
            ste.createTemplate(template)            
        } catch (GroovyRuntimeException gre){
            def details = collectCompilationErrorDetails()
            if(details){
                throw new GroovyRuntimeException("Problems compiling template $original.absolutePath\nSee attached helping script snippet:\n${details.join('\n')}")                
            }
            throw new GroovyRuntimeException("Problems compiling template $original.absolutePath\n${gre.message}")
        }

        if(pkg) {
            return 'package ' + pkg + ';' + inlineIncludes(hjgs.scriptText, original, templatesRoot)
        }

        inlineIncludes(hjgs.scriptText, original, templatesRoot)
    }
    
    private String inlineIncludes(String scriptText, File original, File templatesRoot){
        scriptText.replaceAll(';\\s*include\\s+["\']([^$]*?\\.gtpl)["\']\\s*;') { String match, String path ->
            File file = null
            if(path.startsWith('/')){
                // relative to templates root
                file = new File(templatesRoot, path[1..-1])
            } else {
                // relative to included file
                file = new File(original.parentFile, path)
            }
            def relativeToRoot = file.absolutePath - templatesRoot.absolutePath
            """;
/* include#begin $relativeToRoot */
${getTemplateAsScript(file.text, '', file, templatesRoot)}/* include#end   $relativeToRoot */"""
        }
        .replace('\n/* Generated by SimpleTemplateEngine */', '')
        .replace('\nout.print("""""");', '')
    }

	private List collectCompilationErrorDetails() {
		def lines = hjgs.scriptText.split('\n')
		def details = []
		for(SyntaxErrorMessage compilationError in hjgs.errors.findAll{ it instanceof SyntaxErrorMessage }){
			details << ''
			details << compilationError.cause.message
			details << ''
            
			int detailStartLine = Math.max(0, compilationError.cause.line - 11)
			int detailEndLine = Math.min(compilationError.cause.line + 9, lines.size() - 1)
			int counter = detailStartLine + 1
			int padding = 4
			for(line in lines[detailStartLine..compilationError.cause.line - 1]){
				details << "${counter}".padRight(padding) + ": $line"
				counter ++
			}
			details << '='.padRight(padding) + ':'  + (' ' * compilationError.cause.startColumn) + '^'
			for(line in lines[compilationError.cause.line..detailEndLine]){
				details << "${counter}".padRight(padding) + ": $line"
				counter ++
			}
            
			details << ''
		}
		return details
	}
}
